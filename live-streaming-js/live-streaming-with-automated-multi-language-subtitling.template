Description: '(SO0052) - Live Streaming with Automated Multi-Language Subtitles generated with AWS Transcribe Streaming (Version v1.0.3)'

Parameters:

  Code:
    Description: Select the Code Base to use to deploy the media services.
    Type: String
    Default: Python-3.8
    AllowedValues:
      - Python-3.8
      - Nodejs12.x


  UseCloudFront:
    Description: Deployed a CloudFront CDN Distribution in front of MediaPackage.
    Type: String
    Default: Yes
    AllowedValues:
      - Yes
      - No

  InputType:
    Description: Specify the input type for MediaLive (Default parametrs are for the Demo video)
    Type: String
    Default: URL_PULL
    AllowedValues:
      - RTP_PUSH
      - RTMP_PUSH
      - RTMP_PULL
      - URL_PULL
      - MEDIACONNECT

  InputCodec:
    Description: Specify the codec of the source stream for MediaLive (AVC/HEVC/MPEG2)
    Type: String
    Default: AVC
    AllowedValues:
      - AVC
      - HEVC
      - MPEG2

  InputRes:
    Description: Specify the Encoding Profile to use for MediaLive
    Type: String
    Default: 720
    AllowedValues:
      - 1080
      - 720
      - 480

  InputCIDR:
    Description: Specify the CIDR Block for the MediaLive SecurityGroup
    Type: String
    Default: ""

  PriPullURL:
    Description: Specify the primary source URL for the PULL input stream
    Type: String
    Default: "https://d15an60oaeed9r.cloudfront.net/live_stream_v2/sports_reel_with_markers.m3u8"

  PriPullUser:
    Description: (Optional) Specify a Username for the primary source URL
    Type: String
    Default: ""

  PriPullPass:
    Description: (Optional) Specify a Password for the primary source URL
    Type: String
    Default: ""

  SecPullURL:
    Description: Specify the secondary source URL for the PULL input stream
    Type: String
    Default: "https://d3h5srgm8b0t83.cloudfront.net/live_stream_v2/sports_reel_with_markers.m3u8"

  SecPullUser:
    Description: (Optional) Specify a Username for the secondary source URL
    Type: String
    Default: ""

  SecPullPass:
    Description: (Optional) Specify a Username for the secondary source URL
    Type: String
    Default: ""

  PriMediaConnectArn:
    Description: (Optional) Specify the Arn for MediaConnect as a source
    Type: String
    Default: ""

  SecMediaConnectArn:
    Description: (Optional) Specify the Arn for MediaConnect as a source
    Type: String
    Default: ""

  ChannelStart:
    Description: Start the Live Channel as part of the deployment
    Type: String
    Default: Yes
    AllowedValues:
      - Yes
      - No

  UseSubtitleGeneration:
    Description: Generate Realtime Subtitles with AWS Transcribe.
    Type: String
    Default: Yes
    AllowedValues:
      - Yes
      - No

  SubtitleLanguages:
    Description: Specify languages for subtitle generation. Example "en, es, pt" for English, Spanish and Portuguese.
    Type: String
    Default: "en"

  CustomVocabulary:
    Description: (Optional) Specify a custom vocabulary. Make sure to put your Custom Vocabulary in the N. Virginia (us-east-1) region.
    Type: String
    Default: ""


Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
              Label:
                default: Deployment Options
              Parameters:
                - Code
                - UseCloudFront
            -
              Label:
                default: Live Stream Source
              Parameters:
                - InputType
                - InputCodec
                - InputRes
                - ChannelStart
            -
              Label:
                default: For PUSH Source Input Types
              Parameters:
                - InputCIDR
            -
              Label:
                default: For PULL Source Input Types
              Parameters:
                - PriPullURL
                - PriPullUser
                - PriPullPass
                - SecPullURL
                - SecPullUser
                - SecPullPass
            -
              Label:
                default: MediaConnect Source Type
              Parameters:
                - PriMediaConnectArn
                - SecMediaConnectArn
            -
              Label:
                default: Realtime Subtitles Using AWS Transcribe
              Parameters:
                - UseSubtitleGeneration
                - SubtitleLanguages
                - CustomVocabulary


        ParameterLabels:
          InputType:
            default: Source Input Type
          InputCodec:
            default: Source Codec
          InputRes:
            default: Encoding Profile
          InputCIDR:
            default: Input CIDR Block
          PriPullURL:
            default: Primary Source URL
          PriPullUser:
            default: Primary Source Username
          PriPullPass:
            default: Primary Source Password
          SecPullURL:
            default: Secondary Source URL
          SecPullUser:
            default: Secondary Source Username
          SecPullPass:
            default: Secondary Source Password
          Code:
            default: Source Code
          PriMediaConnectArn:
            default: Primary MediaConnect Arn
          SecMediaConnectArn:
            default: Secondary MediaConnect Arn
          ChannelStart:
            default: Start MediaLive Channel
          UseCloudFront:
            default: Use CloudFront CDN for MediaPackage
          UseSubtitleGeneration:
            default: Turn on Subtitle Generation
          SubtitleLanguages:
            default: Languages For Subtitle Creation


Mappings:
  SourceCode:
    General:
      S3Bucket: solutions
      KeyPrefix: live-streaming-with-automated-multi-language-subtitling/v1.0.3
      # This V2.2.0 is for custom resources. v2.2.0 supports MediaConnect.
      # LivePrefix: live-streaming-on-aws/latest
      LivePrefix: live-streaming-on-aws/v2.3.0

  AnonymousData:
    SendAnonymousData:
      Data: Yes

Conditions:
    Metrics: !Equals [ !FindInMap [AnonymousData,SendAnonymousData,Data], Yes]
    CodeBase: !Equals [!Ref Code, Nodejs12.x]
    Start: !Equals [ !Ref ChannelStart , Yes ]
    Subtitles: !Equals [ !Ref UseSubtitleGeneration , Yes ]
    UseCloudFrontForMediaPackage: !Equals [ !Ref UseCloudFront , Yes ]
    NotUseCloudFrontForMediaPackage: !Equals [ !Ref UseCloudFront , No ]


Resources:

  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-custom-resource"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]
              -
                Effect: Allow
                Action:
                  - medialive:createInputSecurityGroup
                  - medialive:describeInput
                  - medialive:createInput
                  - medialive:deleteInput
                  - medialive:stopChannel
                  - medialive:createChannel
                  - medialive:deleteChannel
                  - medialive:deleteInputSecurityGroup
                  - medialive:describeChannel
                  - medialive:startChannel
                  - medialive:tagResource
                  # feature/P20903447 support deleting input security group &
                  # start channel

                Resource:
                    - !Join ["", ["arn:aws:medialive:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":*"]]
              -
                Effect: Allow
                Action:
                  - mediapackage:createChannel
                  - mediapackage:deleteChannel
                  - mediapackage:listOriginEndpoints
                  - mediapackage:deleteOriginEndpoint
                  - mediapackage:createOriginEndpoint

                Resource:
                    - !Join ["", ["arn:aws:mediapackage:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":*"]]
              -
                Effect: Allow
                Action:
                  - ssm:PutParameter
                Resource:
                  - !Join ["", ["arn:aws:ssm:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":parameter/*"]]
              -
                Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  -  !GetAtt MediaLiveRole.Arn

  MediaLiveRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - "medialive.amazonaws.com"
            Action:
              - sts:AssumeRole

  MediaLiveRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref MediaLiveRole
      PolicyName: !Sub "${AWS::StackName}-mediatranscode-role"
      PolicyDocument:
        Statement:
          -
            Effect: Allow
            Action:
              - ssm:DescribeParameters
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:PutParameter
            Resource:
              - !Join ["", ["arn:aws:ssm:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":parameter/*"]]
          -
            Effect: Allow
            Action:
               # I added S3 read and write permission for the captioning part.
              - s3:PutObject
              - s3:DeleteObject
            Resource:
              - !Join ["", ["arn:aws:s3:::", Ref: CaptionsBucket, "/*"]]
          # feature/P20903447 MediaConnect support
          -
            Effect: Allow
            Action:
              - mediaconnect:ManagedDescribeFlow
              - mediaconnect:ManagedAddOutput
              - mediaconnect:ManagedRemoveOutput
            Resource:
              - !Join ["", ["arn:aws:mediaconnect:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":*"]]

  CustomResource:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-livestream-custom-resources
      Description: Used to deploy custom resources and send AnonymousData
      Handler: !If [CodeBase, index.handler, lambda.handler]
      Role: !GetAtt CustomResourceRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "LivePrefix"],  !If ["CodeBase", "custom-resource-js.zip", "custom-resource-py.zip"]]]
      Runtime:  !If [CodeBase, nodejs12.x, python3.8]
      Timeout: 180

  MediaPackageChannel:
    Type: Custom::MediaPackageChannel
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaPackageChannel
      ChannelId: !Sub ${AWS::StackName}-livestream

  MediaPackageHlsEndpoint:
    DependsOn: MediaPackageChannel
    Type: Custom::MediaPackageHlsEndpoint
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaPackageEndPoint
      EndPoint: HLS
      ChannelId: !GetAtt MediaPackageChannel.ChannelId

  MediaPackageDashEndpoint:
    DependsOn: MediaPackageChannel
    Type: Custom::MediaPackageDashEndpoint
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaPackageEndPoint
      EndPoint: DASH
      ChannelId: !GetAtt MediaPackageChannel.ChannelId

  MediaPackageMssEndpoint:
    DependsOn: MediaPackageChannel
    Type: Custom::MediaPackageMssEndpoint
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaPackageEndPoint
      EndPoint: MSS
      ChannelId: !GetAtt MediaPackageChannel.ChannelId

  MediaLiveInput:
    Type: Custom::MediaLiveInput
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaLiveInput
      StreamName: !Sub ${AWS::StackName}-livestream
      Type: !Ref InputType
      Cidr: !Ref InputCIDR
      PriUrl: !Ref PriPullURL
      PriUser: !Ref PriPullUser
      PriPass: !Ref PriPullPass
      SecUrl: !Ref SecPullURL
      SecUser: !Ref SecPullUser
      SecPass: !Ref SecPullPass
      RoleArn: !GetAtt MediaLiveRole.Arn
      PriMediaConnectArn: !Ref PriMediaConnectArn
      SecMediaConnectArn: !Ref SecMediaConnectArn

  MediaLiveChannel:
    DependsOn: MediaLiveInput
    DependsOn: MediaPackageChannel
    Type: Custom::MediaLiveChannel
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaLiveChannel
      Name: !Sub ${AWS::StackName}-livestream
      Resolution: !Ref InputRes
      Codec: !Ref InputCodec
      Role: !GetAtt MediaLiveRole.Arn
      InputId: !GetAtt MediaLiveInput.Id
      Type: !Ref InputType
      MediaPackagePriUrl: !If [ Subtitles, !Sub "s3://${CaptionsBucket}/livestream_pipe0/channel", !GetAtt MediaPackageChannel.PrimaryUrl ]
      MediaPackagePriUser: !If  [ Subtitles, "" , !GetAtt MediaPackageChannel.PrimaryUser ]
      # FEATURE/P15424610 Dual ingest support for MediaPackage
      # Do not have dual ingest input redudency in MediaPackage to save on cost to generate the subtitles.
      MediaPackageSecUrl: !If [ Subtitles, !Sub "s3://${CaptionsBucket}/livestream_pipe1/channel", !GetAtt MediaPackageChannel.SecondaryUrl ]
      MediaPackageSecUser: !If  [ Subtitles, "" , !GetAtt MediaPackageChannel.SecondaryUser ]


  MediaLiveChannelStart:
    DependsOn: MediaLiveChannel
    Condition: Start
    Type: Custom::MediaLiveChannelStart
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaLiveChannelStart
      ChannelId: !GetAtt MediaLiveChannel.ChannelId


  LogsBucket:
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
    Metadata:  
      cfn_nag:  
        rules_to_suppress:  
          - id: W35  
            reason: "Used to store access logs for other buckets"  
          - id: W51  
            reason: "Bucket is private and does not need a bucket policy"        
          - id: W41  
            reason: "Bucket is private and does not need a bucket policy" 

  LambdaRoleCaptionCreation:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
       - arn:aws:iam::aws:policy/TranslateFullAccess
       - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"

  LambdaRoleCaptionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref LambdaRoleCaptionCreation
      PolicyName: !Sub "${AWS::StackName}-CaptionCreationLambda"
      PolicyDocument:
        Statement:
          -
            Effect: Allow
            Action:
               # I added S3 read and write permission for the captions bucket.
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
            Resource:
              - !Join ["", ["arn:aws:s3:::", Ref: CaptionsBucket, "/*"]]
          -
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]
          -
            Effect: Allow
            Action:
              - lambda:UpdateFunctionConfiguration
            Resource:
              - !Join ["", ["arn:aws:lambda:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":", "function:*" ]]
          -
            Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !Join ["", ["arn:aws:lambda:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":", "function:*" ]]

  LambdaRoleTranscribeLambda:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonTranscribeFullAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-TranscribeLambda"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]
              -
                Effect: Allow
                Action:
                  - lambda:UpdateFunctionConfiguration
                Resource:
                  - !Join ["", ["arn:aws:lambda:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":", "function:*" ]]

# Lambda Functions
# Caption Creation function
  CaptionCreation:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CaptionGenerationLambda
      Description: Generated captions and sends this with the video into MediaPackage.
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaRoleCaptionCreation.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "captionlambda.zip"]]
      Runtime:  python3.6
      Timeout: 60
      MemorySize: 1024
      Environment:
        Variables:
          mediaPackageUrlPipe0: !GetAtt MediaPackageChannel.PrimaryUrl
          mediaPackageUsernamePipe0: !GetAtt MediaPackageChannel.PrimaryUser
          mediaPackageUrlPipe1: !GetAtt MediaPackageChannel.SecondaryUrl
          mediaPackageUsernamePipe1: !GetAtt MediaPackageChannel.SecondaryUser
          captionLanguages: !Ref SubtitleLanguages
          transcribeLambdaARN: !GetAtt TranscribeLambda.Arn

# Java Lambda
  TranscribeLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-TranscribeStreamingLambda
      Description: Gets transcribed text from Amazon Transcribe Streaming.
      Handler: LambdaPackage.Lambda::handleRequest
      Role: !GetAtt LambdaRoleTranscribeLambda.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "TranscribeStreamingJavaLambda.jar"]]
      Runtime:  java8
      Timeout: 60
      MemorySize: 1024
      Environment:
        Variables:
          customVocabulary: !Ref CustomVocabulary

# Permission for CaptionCreation Lambda to be invoked from AWS S3 Cloudwatch event.
  CaptionCreationPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CaptionCreation.Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'

  CaptionsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
        - Id: ExpireRule
          Status: Enabled
          ExpirationInDays: '1'
          NoncurrentVersionExpirationInDays: '1'
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        LambdaConfigurations:
          -
            Function: !GetAtt CaptionCreation.Arn
            Event: "s3:ObjectCreated:*"
            Filter:
              S3Key:
                Rules:
                  -
                    Name: suffix
                    Value: .m3u8
    Metadata:  
      cfn_nag:  
        rules_to_suppress:  
          - id: W35  
            reason: "Used to store access logs for other buckets"  
          - id: W51  
            reason: "Bucket is private and does not need a bucket policy"        
          - id: W41  
            reason: "Bucket is private and does not need a bucket policy"                     

  # Metrics
  Uuid:
    Condition: Metrics
    Type: "Custom::UUID"
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: UUID

  AnonymousMetric:
    Condition: Metrics
    Type: "Custom::AnonymousMetric"
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: AnonymousMetric
      SolutionId: "SO0052"
      UUID: !GetAtt Uuid.UUID
      Version: "1.0"
      InputType: !Ref InputType
      InputCodec: !Ref InputCodec
      InputRes: !Ref InputRes
      Code: !Ref Code
      UseSubtitleGeneration: !Ref UseSubtitleGeneration
      SubtitleLanguages: !Ref SubtitleLanguages
      CustomVocabulary: !Ref CustomVocabulary


# CloudFront Setup
  CloudFront:
    Condition: UseCloudFrontForMediaPackage
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: hls
            DomainName: !GetAtt MediaPackageHlsEndpoint.DomainName
            OriginPath: /out/v1
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
          - Id: dash
            DomainName: !GetAtt MediaPackageDashEndpoint.DomainName
            OriginPath: /out/v1
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
          - Id: mss
            DomainName: !GetAtt MediaPackageMssEndpoint.DomainName
            OriginPath: /out/v1
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        Enabled: 'true'
        Logging:
          Bucket: !GetAtt LogsBucket.DomainName
          Prefix: livestream/
        DefaultCacheBehavior:
          TargetOriginId: hls
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: 'true'
            Cookies:
              Forward: all
            Headers:
              - Origin
              - Access-Control-Request-Method
              - Access-Control-Request-Header
          ViewerProtocolPolicy: allow-all
        CacheBehaviors:
          - TargetOriginId: hls
            PathPattern: MediaPackageHlsEndpoint.Path
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            ForwardedValues:
              QueryString: 'true'
              Cookies:
                Forward: all
              Headers:
                - Origin
                - Access-Control-Request-Method
                - Access-Control-Request-Headers
            ViewerProtocolPolicy: allow-all
          - TargetOriginId: dash
            PathPattern: MediaPackageDashEndpoint.Path
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            ForwardedValues:
              QueryString: 'true'
              Cookies:
                Forward: all
              Headers:
                - Origin
                - Access-Control-Request-Method
                - Access-Control-Request-Headers
            ViewerProtocolPolicy: allow-all
          - TargetOriginId: mss
            PathPattern: MediaPackageMssEndpoint.Path
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            ForwardedValues:
              QueryString: 'true'
              Cookies:
                Forward: all
              Headers:
                - Origin
                - Access-Control-Request-Method
                - Access-Control-Request-Headers
            SmoothStreaming: 'true'
            ViewerProtocolPolicy: allow-all
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'


# Outputs
Outputs:
  UUID:
    Condition: Metrics
    Description: AnonymousMetric UUID
    Value: !GetAtt Uuid.UUID

  MediaLivePrimaryEndpoint:
    Description: Primary MediaLive input Url
    Value: !GetAtt MediaLiveInput.EndPoint1

  MediaLiveSecondaryEndpoint:
    Description: Primary MediaLive input Url
    Value: !GetAtt MediaLiveInput.EndPoint2

  MediaPackageHlsEnpoint:
    Condition: NotUseCloudFrontForMediaPackage
    Description: HLS MediaPackage URL
    Value: !Sub https://${MediaPackageHlsEndpoint.DomainName}/out/v1${MediaPackageHlsEndpoint.Manifest}

  MediaPackageDashEnpoint:
    Condition: NotUseCloudFrontForMediaPackage
    Description: DASH MediaPackage URL
    Value: !Sub https://${MediaPackageDashEndpoint.DomainName}/out/v1${MediaPackageDashEndpoint.Manifest}

  MediaPackageMssEnpoint:
    Condition: NotUseCloudFrontForMediaPackage
    Description: MSS MediaPackage URL
    Value: !Sub https://${MediaPackageMssEndpoint.DomainName}/out/v1${MediaPackageMssEndpoint.Manifest}

  CloudFrontHlsEnpoint:
    Condition: UseCloudFrontForMediaPackage
    Description: HLS CloudFront URL
    Value: !Sub https://${CloudFront.DomainName}${MediaPackageHlsEndpoint.Manifest}

  CloudFrontDashEnpoint:
    Condition: UseCloudFrontForMediaPackage
    Description: DASH CloudFront URL
    Value: !Sub https://${CloudFront.DomainName}${MediaPackageDashEndpoint.Manifest}

  CloudFrontMssEnpoint:
    Condition: UseCloudFrontForMediaPackage
    Description: MSS CloudFront URL
    Value: !Sub https://${CloudFront.DomainName}${MediaPackageMssEndpoint.Manifest}